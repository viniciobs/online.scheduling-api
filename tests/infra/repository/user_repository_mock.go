// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/infra/repository/user_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/online.scheduling-api/src/models"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockIUserRepository) ActivateUser(uuid *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockIUserRepositoryMockRecorder) ActivateUser(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockIUserRepository)(nil).ActivateUser), uuid)
}

// CreateNewUser mocks base method.
func (m *MockIUserRepository) CreateNewUser(u *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockIUserRepositoryMockRecorder) CreateNewUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateNewUser), u)
}

// DeleteUserById mocks base method.
func (m *MockIUserRepository) DeleteUserById(uuid *uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockIUserRepositoryMockRecorder) DeleteUserById(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockIUserRepository)(nil).DeleteUserById), uuid)
}

// EditUser mocks base method.
func (m *MockIUserRepository) EditUser(uuid *uuid.UUID, u *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", uuid, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUser indicates an expected call of EditUser.
func (mr *MockIUserRepositoryMockRecorder) EditUser(uuid, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockIUserRepository)(nil).EditUser), uuid, u)
}

// EditUserModalities mocks base method.
func (m *MockIUserRepository) EditUserModalities(uuid *uuid.UUID, u *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserModalities", uuid, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserModalities indicates an expected call of EditUserModalities.
func (mr *MockIUserRepositoryMockRecorder) EditUserModalities(uuid, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserModalities", reflect.TypeOf((*MockIUserRepository)(nil).EditUserModalities), uuid, u)
}

// ExistsByPhone mocks base method.
func (m *MockIUserRepository) ExistsByPhone(uuid *uuid.UUID, phone *string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByPhone", uuid, phone)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByPhone indicates an expected call of ExistsByPhone.
func (mr *MockIUserRepositoryMockRecorder) ExistsByPhone(uuid, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByPhone", reflect.TypeOf((*MockIUserRepository)(nil).ExistsByPhone), uuid, phone)
}

// GetAllUsers mocks base method.
func (m *MockIUserRepository) GetAllUsers() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIUserRepositoryMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIUserRepository)(nil).GetAllUsers))
}

// GetUserById mocks base method.
func (m *MockIUserRepository) GetUserById(uuid *uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", uuid)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserRepositoryMockRecorder) GetUserById(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUserRepository)(nil).GetUserById), uuid)
}
