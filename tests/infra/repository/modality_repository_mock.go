// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/infra/repository/modality_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/online.scheduling-api/src/models"
)

// MockIModalityRepository is a mock of IModalityRepository interface.
type MockIModalityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIModalityRepositoryMockRecorder
}

// MockIModalityRepositoryMockRecorder is the mock recorder for MockIModalityRepository.
type MockIModalityRepositoryMockRecorder struct {
	mock *MockIModalityRepository
}

// NewMockIModalityRepository creates a new mock instance.
func NewMockIModalityRepository(ctrl *gomock.Controller) *MockIModalityRepository {
	mock := &MockIModalityRepository{ctrl: ctrl}
	mock.recorder = &MockIModalityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIModalityRepository) EXPECT() *MockIModalityRepositoryMockRecorder {
	return m.recorder
}

// CreateNewModality mocks base method.
func (m_2 *MockIModalityRepository) CreateNewModality(m *models.Modality) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateNewModality", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewModality indicates an expected call of CreateNewModality.
func (mr *MockIModalityRepositoryMockRecorder) CreateNewModality(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewModality", reflect.TypeOf((*MockIModalityRepository)(nil).CreateNewModality), m)
}

// DeleteSModalityById mocks base method.
func (m *MockIModalityRepository) DeleteSModalityById(uuid *uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSModalityById", uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSModalityById indicates an expected call of DeleteSModalityById.
func (mr *MockIModalityRepositoryMockRecorder) DeleteSModalityById(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSModalityById", reflect.TypeOf((*MockIModalityRepository)(nil).DeleteSModalityById), uuid)
}

// EditModality mocks base method.
func (m_2 *MockIModalityRepository) EditModality(uuid *uuid.UUID, m *models.Modality) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "EditModality", uuid, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditModality indicates an expected call of EditModality.
func (mr *MockIModalityRepositoryMockRecorder) EditModality(uuid, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditModality", reflect.TypeOf((*MockIModalityRepository)(nil).EditModality), uuid, m)
}

// GetAllModalities mocks base method.
func (m *MockIModalityRepository) GetAllModalities() ([]*models.Modality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllModalities")
	ret0, _ := ret[0].([]*models.Modality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllModalities indicates an expected call of GetAllModalities.
func (mr *MockIModalityRepositoryMockRecorder) GetAllModalities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllModalities", reflect.TypeOf((*MockIModalityRepository)(nil).GetAllModalities))
}

// GetModalityById mocks base method.
func (m *MockIModalityRepository) GetModalityById(uuid *uuid.UUID) (*models.Modality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModalityById", uuid)
	ret0, _ := ret[0].(*models.Modality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModalityById indicates an expected call of GetModalityById.
func (mr *MockIModalityRepositoryMockRecorder) GetModalityById(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModalityById", reflect.TypeOf((*MockIModalityRepository)(nil).GetModalityById), uuid)
}
