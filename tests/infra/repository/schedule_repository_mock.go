// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/infra/repository/schedule_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/online.scheduling-api/src/models"
)

// MockIScheduleRepository is a mock of IScheduleRepository interface.
type MockIScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIScheduleRepositoryMockRecorder
}

// MockIScheduleRepositoryMockRecorder is the mock recorder for MockIScheduleRepository.
type MockIScheduleRepositoryMockRecorder struct {
	mock *MockIScheduleRepository
}

// NewMockIScheduleRepository creates a new mock instance.
func NewMockIScheduleRepository(ctrl *gomock.Controller) *MockIScheduleRepository {
	mock := &MockIScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockIScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScheduleRepository) EXPECT() *MockIScheduleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIScheduleRepository) Create(arg0 *models.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIScheduleRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIScheduleRepository)(nil).Create), arg0)
}

// DeleteBy mocks base method.
func (m *MockIScheduleRepository) DeleteBy(userId, modalityId *uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBy", userId, modalityId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBy indicates an expected call of DeleteBy.
func (mr *MockIScheduleRepositoryMockRecorder) DeleteBy(userId, modalityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBy", reflect.TypeOf((*MockIScheduleRepository)(nil).DeleteBy), userId, modalityId)
}

// Edit mocks base method.
func (m *MockIScheduleRepository) Edit(arg0 *models.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockIScheduleRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockIScheduleRepository)(nil).Edit), arg0)
}

// Get mocks base method.
func (m *MockIScheduleRepository) Get(arg0 *models.ScheduleFilter) ([]*models.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]*models.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIScheduleRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIScheduleRepository)(nil).Get), arg0)
}
